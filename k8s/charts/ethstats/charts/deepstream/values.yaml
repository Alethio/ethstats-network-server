replicaCount: 1
image:
  repository: deepstreamio/deepstream.io
  tag: 3.0.0
  pullPolicy: IfNotPresent
service:
  ws:
    name: deepstream-ws
    type: ClusterIP
    externalPort: 6020
    internalPort: 6020
  http:
    name: deepstream-http
    type: ClusterIP
    externalPort: 8080
    internalPort: 8080
ingress:
  enabled: true
  # Used to create an Ingress record.
  hosts:
    - ds.aleth.io
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.org/websocket-services: "ws-svc"
  tls:
    # Secrets must be manually created in the namespace.
    - hosts:
      - ds.aleth.io
      secretName: tls-ds

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi


###################
#
#    Config section, one big config file section. Will be mounted in /etc/deepstream/*
#
#######

config:
  config.yml: |-
    # General
    # Each server within a cluster needs a unique name. Set to UUID to have deepstream autogenerate a unique id
    serverName: UUID
    # Show the deepstream logo on startup (highly recommended)
    showLogo: true
    # Log messages with this level and above. Valid levels are DEBUG, INFO, WARN, ERROR, OFF
    logLevel: INFO
    # Directory where all plugins reside
    libDir: /var/lib/deepstream

    # Connectivity
    # webfacing URL under which this client is reachable. Used for loadbalancing / failover
    externalUrl: null

    # SSL Configuration
    sslKey: null
    sslCert: null
    sslCa: null

    # Connection Endpoint Configuration
    # currently at most one may be specified
    connectionEndpoints:
      websocket:
        name: uws
        options:
            # port for the websocket server
            port: 6020
            # host for the websocket server
            host: 0.0.0.0
            # url path websocket connections connect to
            urlPath: /deepstream
            # url path for http health-checks, GET requests to this path will return 200 if deepstream is alive
            healthCheckPath: /health-check
            # the amount of milliseconds between each ping/heartbeat message
            heartbeatInterval: 30000
            # the amount of milliseconds that writes to sockets are buffered
            outgoingBufferTimeout: 0

            # Security
            # amount of time a connection can remain open while not being logged in
            unauthenticatedClientTimeout: 180000
            # invalid login attempts before the connection is cut
            maxAuthAttempts: 3
            # if true, the logs will contain the cleartext username / password of invalid login attempts
            logInvalidAuthData: false
            # maximum allowed size of an individual message in bytes
            maxMessageSize: 1048576

      http:
        name: http
        options:
          # port for the http server
          port: 8080
          # host for the http server
          host: 0.0.0.0
          # allow 'authData' parameter in POST requests, if disabled only token and OPEN auth is
          # possible
          allowAuthData: true
          # enable the authentication endpoint for requesting tokens/userData.
          # note: a custom authentication handler is required for token generation
          enableAuthEndpoint: false
          # path for authentication requests
          authPath: /auth
          # path for POST requests
          postPath: /
          # path for GET requests
          getPath: /
          # url path for http health-checks, GET requests to this path will return 200 if deepstream is alive
          healthCheckPath: /health-check

          # -- CORS --
          # if disabled, only requests with an 'Origin' header matching one specified under 'origins'
          # below will be permitted and the 'Access-Control-Allow-Credentials' response header will be
          # enabled
          allowAllOrigins: true
          # a list of allowed origins
          origins:
            - 'https://example.com'

    # Logger Configuration
    logger:
      name: winston
      options:
        # specify a list of transports (console, file, time)
        -
          type: console
          options:
            level: info # value of logLevel will always overwrite this value
            colorize: true
        -
          type: time
          options:
            filename: /var/log/deepstream/deepstream

    # Plugin Configuration
    plugins:
      # cache:
      #   name: memcached
      #   options:
      #     serverLocation: 'localhost:11211'
      #
      # storage:
      #   name: rethinkdb
      #   options:
      #     host: localhost
      #     port: 28015

    # Storage options
    # a RegExp that matches recordNames. If it matches, the record's data won't be stored in the db
    storageExclusion: null

    #Authentication
    auth:
      type: none

    #   # reading users and passwords from a file
    #   type: file
    #   options:
    #     # Path to the user file. Can be json, js or yml
    #     path: ./users.yml
    #     # the name of a HMAC digest algorithm
    #     hash: 'md5'
    #     # the number of times the algorithm should be applied
    #     iterations: 100
    #     # the length of the resulting key
    #     keyLength: 32

    #   # getting permissions from a http webhook
    #   type: http
    #   options:
    #     # a post request will be send to this url on every incoming connection
    #     endpointUrl: https://someurl.com/validateLogin
    #     # any of these will be treated as access granted
    #     permittedStatusCodes: [ 200 ]
    #     # if the webhook didn't respond after this amount of milliseconds, the connection will be rejected
    #     requestTimeout: 2000

    # Permissioning
    permission:
      # Only config or custom permissionHandler at the moment
      type: config
      options:
        # Path to the permissionFile. Can be json, js or yml
        path: ./permissions.yml
        # Amount of times nested cross-references will be loaded. Avoids endless loops
        maxRuleIterations: 3
        # PermissionResults are cached to increase performance. Lower number means more loading
        cacheEvacuationInterval: 60000

    # Timeouts (in milliseconds)
    # Timeout for client RPC acknownledgement
    rpcAckTimeout: 1000
    # Timeout for actual RPC provider response
    rpcTimeout: 10000
    # Maximum time permitted to fetch from cache
    cacheRetrievalTimeout: 1000
    # Maximum time permitted to fetch from storage
    storageRetrievalTimeout: 2000
    # Plugin startup timeout â€“ deepstream init will fail if any plugins fail to emit a 'done' event within this timeout
    dependencyInitialisationTimeout: 2000
    # The amount of time to wait for a provider to acknowledge or reject a listen request
    listenResponseTimeout: 500
    # The amount of time a lock can be reserved for before it is force released
    lockTimeout: 1000
    # The amount of time a lock request waits for before it defaults to false
    lockRequestTimeout: 1000
    # The amount of time a broadcast will wait (to allow broadcast coalescing). -1 means disabled.
    broadcastTimeout: 0
    # A list of prefixes that, when a record is updated via setData and it matches one of the prefixes
    # it will be permissioned and written directly to the cache and storage layers
    # storageHotPathPatterns:
      # - analytics/
      # - metrics/

  permissions.yml: |-
    presence:
      "*":
        allow: true
    record:
      "*":
        create: true
        write: true
        read: true
        delete: true
        listen: true
    event:
      "*":
        publish: true
        subscribe: true
        listen: true
    rpc:
      "*":
        provide: true
        request: true

  users.yml: |-
    # Username
    valer:

    userA:
      # Password hash ( hash options passed within config.yml )
      # This hash represents clear text "password" with default options
      password: "rCOSZxJrgze2AZdVQh12c6ErDMOG0M+Rx5Yu7S5d91c=GS4SbTQYmoaGwjm2shEobg=="
      # Server data is used within your permission handler
      serverData:
        someOptional: "auth-data"
      # Client data is sent to the client on login
      clientData:
        favouriteColor: "red"

